"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""

import cStringIO as StringIO
import struct

import rect_t

class rect_list_t(object):
    __slots__ = ["utime", "xy", "num_rects", "rects"]

    def __init__(self):
        self.utime = 0
        self.xy = [ 0.0 for dim0 in range(2) ]
        self.num_rects = 0
        self.rects = []

    def encode(self):
        buf = StringIO.StringIO()
        buf.write(rect_list_t._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack(">q", self.utime))
        buf.write(struct.pack('>2d', *self.xy[:2]))
        buf.write(struct.pack(">i", self.num_rects))
        for i0 in range(self.num_rects):
            self.rects[i0]._encode_one(buf)

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = StringIO.StringIO(data)
        if buf.read(8) != rect_list_t._get_packed_fingerprint():
            raise ValueError("Decode error")
        return rect_list_t._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = rect_list_t()
        self.utime = struct.unpack(">q", buf.read(8))[0]
        self.xy = struct.unpack('>2d', buf.read(16))
        self.num_rects = struct.unpack(">i", buf.read(4))[0]
        self.rects = []
        for i0 in range(self.num_rects):
            self.rects.append(rect_t.rect_t._decode_one(buf))
        return self
    _decode_one = staticmethod(_decode_one)

    _hash = None
    def _get_hash_recursive(parents):
        if rect_list_t in parents: return 0
        newparents = parents + [rect_list_t]
        tmphash = (0x9f791c9db89d72ee+ rect_t.rect_t._get_hash_recursive(newparents)) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff)  + (tmphash>>63)) & 0xffffffffffffffff 
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None
    
    def _get_packed_fingerprint():
        if rect_list_t._packed_fingerprint is None:
            rect_list_t._packed_fingerprint = struct.pack(">Q", rect_list_t._get_hash_recursive([]))
        return rect_list_t._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)

