"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""

import cStringIO as StringIO
import struct

import waypoint_list_t

class task_pose_trajectory_t(object):
    __slots__ = ["utime", "waypoints", "task_id"]

    def __init__(self):
        self.utime = 0
        self.waypoints = None
        self.task_id = 0

    def encode(self):
        buf = StringIO.StringIO()
        buf.write(task_pose_trajectory_t._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack(">q", self.utime))
        self.waypoints._encode_one(buf)
        buf.write(struct.pack(">q", self.task_id))

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = StringIO.StringIO(data)
        if buf.read(8) != task_pose_trajectory_t._get_packed_fingerprint():
            raise ValueError("Decode error")
        return task_pose_trajectory_t._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = task_pose_trajectory_t()
        self.utime = struct.unpack(">q", buf.read(8))[0]
        self.waypoints = waypoint_list_t.waypoint_list_t._decode_one(buf)
        self.task_id = struct.unpack(">q", buf.read(8))[0]
        return self
    _decode_one = staticmethod(_decode_one)

    _hash = None
    def _get_hash_recursive(parents):
        if task_pose_trajectory_t in parents: return 0
        newparents = parents + [task_pose_trajectory_t]
        tmphash = (0x8329530fe86fac37+ waypoint_list_t.waypoint_list_t._get_hash_recursive(newparents)) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff)  + (tmphash>>63)) & 0xffffffffffffffff 
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None
    
    def _get_packed_fingerprint():
        if task_pose_trajectory_t._packed_fingerprint is None:
            task_pose_trajectory_t._packed_fingerprint = struct.pack(">Q", task_pose_trajectory_t._get_hash_recursive([]))
        return task_pose_trajectory_t._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)

