"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""

import cStringIO as StringIO
import struct

class track_t(object):
    __slots__ = ["id", "pos", "size", "size_good", "theta", "vel", "confidence"]

    def __init__(self):
        self.id = 0
        self.pos = [ 0.0 for dim0 in range(2) ]
        self.size = [ 0.0 for dim0 in range(2) ]
        self.size_good = False
        self.theta = 0.0
        self.vel = [ 0.0 for dim0 in range(2) ]
        self.confidence = 0

    def encode(self):
        buf = StringIO.StringIO()
        buf.write(track_t._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack(">q", self.id))
        buf.write(struct.pack('>2d', *self.pos[:2]))
        buf.write(struct.pack('>2d', *self.size[:2]))
        buf.write(struct.pack(">bd", self.size_good, self.theta))
        buf.write(struct.pack('>2d', *self.vel[:2]))
        buf.write(struct.pack(">i", self.confidence))

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = StringIO.StringIO(data)
        if buf.read(8) != track_t._get_packed_fingerprint():
            raise ValueError("Decode error")
        return track_t._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = track_t()
        self.id = struct.unpack(">q", buf.read(8))[0]
        self.pos = struct.unpack('>2d', buf.read(16))
        self.size = struct.unpack('>2d', buf.read(16))
        self.size_good, self.theta = struct.unpack(">bd", buf.read(9))
        self.vel = struct.unpack('>2d', buf.read(16))
        self.confidence = struct.unpack(">i", buf.read(4))[0]
        return self
    _decode_one = staticmethod(_decode_one)

    _hash = None
    def _get_hash_recursive(parents):
        if track_t in parents: return 0
        tmphash = (0xbdff2ddbafa20a3e) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff)  + (tmphash>>63)) & 0xffffffffffffffff 
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None
    
    def _get_packed_fingerprint():
        if track_t._packed_fingerprint is None:
            track_t._packed_fingerprint = struct.pack(">Q", track_t._get_hash_recursive([]))
        return track_t._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)

