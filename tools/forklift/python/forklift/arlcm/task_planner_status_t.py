"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""

import cStringIO as StringIO
import struct

import task_summary_t

import task_planner_state_enum_t

class task_planner_status_t(object):
    __slots__ = ["utime", "current_task_active_utime", "current_job_active_utime", "num_tasks_remaining", "tasks", "num_jobs_remaining", "jobs", "task_planner_state", "has_load", "error"]

    PALLET_NOT_FOUND = 0x00000001
    PATH_OBSTRUCTED = 0x00000002
    TRUCK_NOT_FOUND = 0x00000004
    BAD_ROI_OBSTRUCTED = 0x00000008
    BAD_ROI_OUT_OF_ZONE = 0x00000010
    BAD_ROI_OUT_OF_BAY = 0x00000020

    def __init__(self):
        self.utime = 0
        self.current_task_active_utime = 0
        self.current_job_active_utime = 0
        self.num_tasks_remaining = 0
        self.tasks = []
        self.num_jobs_remaining = 0
        self.jobs = []
        self.task_planner_state = None
        self.has_load = False
        self.error = 0

    def encode(self):
        buf = StringIO.StringIO()
        buf.write(task_planner_status_t._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack(">qqqh", self.utime, self.current_task_active_utime, self.current_job_active_utime, self.num_tasks_remaining))
        for i0 in range(self.num_tasks_remaining):
            self.tasks[i0]._encode_one(buf)
        buf.write(struct.pack(">h", self.num_jobs_remaining))
        for i0 in range(self.num_jobs_remaining):
            self.jobs[i0]._encode_one(buf)
        self.task_planner_state._encode_one(buf)
        buf.write(struct.pack(">bq", self.has_load, self.error))

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = StringIO.StringIO(data)
        if buf.read(8) != task_planner_status_t._get_packed_fingerprint():
            raise ValueError("Decode error")
        return task_planner_status_t._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = task_planner_status_t()
        self.utime, self.current_task_active_utime, self.current_job_active_utime, self.num_tasks_remaining = struct.unpack(">qqqh", buf.read(26))
        self.tasks = []
        for i0 in range(self.num_tasks_remaining):
            self.tasks.append(task_summary_t.task_summary_t._decode_one(buf))
        self.num_jobs_remaining = struct.unpack(">h", buf.read(2))[0]
        self.jobs = []
        for i0 in range(self.num_jobs_remaining):
            self.jobs.append(task_summary_t.task_summary_t._decode_one(buf))
        self.task_planner_state = task_planner_state_enum_t.task_planner_state_enum_t._decode_one(buf)
        self.has_load, self.error = struct.unpack(">bq", buf.read(9))
        return self
    _decode_one = staticmethod(_decode_one)

    _hash = None
    def _get_hash_recursive(parents):
        if task_planner_status_t in parents: return 0
        newparents = parents + [task_planner_status_t]
        tmphash = (0xd4a9d341e3497b4e+ task_summary_t.task_summary_t._get_hash_recursive(newparents)+ task_summary_t.task_summary_t._get_hash_recursive(newparents)+ task_planner_state_enum_t.task_planner_state_enum_t._get_hash_recursive(newparents)) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff)  + (tmphash>>63)) & 0xffffffffffffffff 
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None
    
    def _get_packed_fingerprint():
        if task_planner_status_t._packed_fingerprint is None:
            task_planner_status_t._packed_fingerprint = struct.pack(">Q", task_planner_status_t._get_hash_recursive([]))
        return task_planner_status_t._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)

